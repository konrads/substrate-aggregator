//! Autogenerated weights for pallet_aggregator
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-31, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Interpreted, CHAIN: None, DB CACHE: 128

// Executed Command:
// target/debug/node-template
// benchmark
// --extrinsic
// *
// --pallet
// pallet_aggregator
// --wasm-execution
// interpreted-i-know-what-i-do
// --output
// ./pallets/aggregator/src/weights.rs
// --template=frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_aggregator.
pub trait WeightInfo {
	fn add_price_pair_nonexisting() -> Weight;
	fn add_price_pair_existing() -> Weight;
	fn delete_price_pair() -> Weight;
	fn submit_price_pairs() -> Weight;
	fn trade() -> Weight;
	fn ocw_submit_best_paths_changes() -> Weight;
}

/// Weights for pallet_aggregator using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn add_price_pair_nonexisting() -> Weight {
		(115_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn add_price_pair_existing() -> Weight {
		(39_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn delete_price_pair() -> Weight {
		(108_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn submit_price_pairs() -> Weight {
		(38_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn trade() -> Weight {
		(39_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn ocw_submit_best_paths_changes() -> Weight {
		(42_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn add_price_pair_nonexisting() -> Weight {
		(115_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn add_price_pair_existing() -> Weight {
		(39_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn delete_price_pair() -> Weight {
		(108_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn submit_price_pairs() -> Weight {
		(38_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn trade() -> Weight {
		(39_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn ocw_submit_best_paths_changes() -> Weight {
		(42_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}

